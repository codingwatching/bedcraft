#include "ConfiguredFeatures.hpp"
#include "ConfiguredFeature.hpp"
#include "Feature.hpp"
#include "Features.hpp"
#include "config/FeatureConfig.hpp"

std::map<std::string, std::unique_ptr<ConfiguredFeature>> ConfiguredFeatures::features;
ConfiguredFeature* ConfiguredFeatures::END_SPIKE;
ConfiguredFeature* ConfiguredFeatures::END_GATEWAY;
ConfiguredFeature* ConfiguredFeatures::END_GATEWAY_DELAYED;
ConfiguredFeature* ConfiguredFeatures::CHORUS_PLANT;
ConfiguredFeature* ConfiguredFeatures::END_ISLAND;
ConfiguredFeature* ConfiguredFeatures::END_ISLAND_DECORATED;
ConfiguredFeature* ConfiguredFeatures::DELTA;
ConfiguredFeature* ConfiguredFeatures::SMALL_BASALT_COLUMNS;
ConfiguredFeature* ConfiguredFeatures::LARGE_BASALT_COLUMNS;
ConfiguredFeature* ConfiguredFeatures::BASALT_BLOBS;
ConfiguredFeature* ConfiguredFeatures::BLACKSTONE_BLOBS;
ConfiguredFeature* ConfiguredFeatures::GLOWSTONE_EXTRA;
ConfiguredFeature* ConfiguredFeatures::GLOWSTONE;
ConfiguredFeature* ConfiguredFeatures::CRIMSON_FOREST_VEGETATION;
ConfiguredFeature* ConfiguredFeatures::WARPED_FOREST_VEGETATION;
ConfiguredFeature* ConfiguredFeatures::NETHER_SPROUTS;
ConfiguredFeature* ConfiguredFeatures::TWISTING_VINES;
ConfiguredFeature* ConfiguredFeatures::WEEPING_VINES;
ConfiguredFeature* ConfiguredFeatures::BASALT_PILLAR;
ConfiguredFeature* ConfiguredFeatures::SEAGRASS_COLD;
ConfiguredFeature* ConfiguredFeatures::SEAGRASS_DEEP_COLD;
ConfiguredFeature* ConfiguredFeatures::SEAGRASS_NORMAL;
ConfiguredFeature* ConfiguredFeatures::SEAGRASS_RIVER;
ConfiguredFeature* ConfiguredFeatures::SEAGRASS_DEEP;
ConfiguredFeature* ConfiguredFeatures::SEAGRASS_SWAMP;
ConfiguredFeature* ConfiguredFeatures::SEAGRASS_WARM;
ConfiguredFeature* ConfiguredFeatures::SEAGRASS_DEEP_WARM;
ConfiguredFeature* ConfiguredFeatures::SEA_PICKLE;
ConfiguredFeature* ConfiguredFeatures::ICE_SPIKE;
ConfiguredFeature* ConfiguredFeatures::ICE_PATCH;
ConfiguredFeature* ConfiguredFeatures::FOREST_ROCK;
ConfiguredFeature* ConfiguredFeatures::SEAGRASS_SIMPLE;
ConfiguredFeature* ConfiguredFeatures::ICEBERG_PACKED;
ConfiguredFeature* ConfiguredFeatures::ICEBERG_BLUE;
ConfiguredFeature* ConfiguredFeatures::KELP_COLD;
ConfiguredFeature* ConfiguredFeatures::KELP_WARM;
ConfiguredFeature* ConfiguredFeatures::BLUE_ICE;
ConfiguredFeature* ConfiguredFeatures::BAMBOO_LIGHT;
ConfiguredFeature* ConfiguredFeatures::BAMBOO;
ConfiguredFeature* ConfiguredFeatures::VINES;
ConfiguredFeature* ConfiguredFeatures::LAKE_WATER;
ConfiguredFeature* ConfiguredFeatures::LAKE_LAVA;
ConfiguredFeature* ConfiguredFeatures::DISK_CLAY;
ConfiguredFeature* ConfiguredFeatures::DISK_GRAVEL;
ConfiguredFeature* ConfiguredFeatures::DISK_SAND;
ConfiguredFeature* ConfiguredFeatures::FREEZE_TOP_LAYER;
ConfiguredFeature* ConfiguredFeatures::BONUS_CHEST;
ConfiguredFeature* ConfiguredFeatures::VOID_START_PLATFORM;
ConfiguredFeature* ConfiguredFeatures::MONSTER_ROOM;
ConfiguredFeature* ConfiguredFeatures::DESERT_WELL;
ConfiguredFeature* ConfiguredFeatures::FOSSIL;
ConfiguredFeature* ConfiguredFeatures::SPRING_LAVA_DOUBLE;
ConfiguredFeature* ConfiguredFeatures::SPRING_LAVA;
ConfiguredFeature* ConfiguredFeatures::SPRING_DELTA;
ConfiguredFeature* ConfiguredFeatures::SPRING_CLOSED;
ConfiguredFeature* ConfiguredFeatures::SPRING_CLOSED_DOUBLE;
ConfiguredFeature* ConfiguredFeatures::SPRING_OPEN;
ConfiguredFeature* ConfiguredFeatures::SPRING_WATER;
ConfiguredFeature* ConfiguredFeatures::PILE_HAY;
ConfiguredFeature* ConfiguredFeatures::PILE_MELON;
ConfiguredFeature* ConfiguredFeatures::PILE_SNOW;
ConfiguredFeature* ConfiguredFeatures::PILE_ICE;
ConfiguredFeature* ConfiguredFeatures::PILE_PUMPKIN;
ConfiguredFeature* ConfiguredFeatures::PATCH_FIRE;
ConfiguredFeature* ConfiguredFeatures::PATCH_SOUL_FIRE;
ConfiguredFeature* ConfiguredFeatures::PATCH_BROWN_MUSHROOM;
ConfiguredFeature* ConfiguredFeatures::PATCH_RED_MUSHROOM;
ConfiguredFeature* ConfiguredFeatures::PATCH_CRIMSON_ROOTS;
ConfiguredFeature* ConfiguredFeatures::PATCH_SUNFLOWER;
ConfiguredFeature* ConfiguredFeatures::PATCH_PUMPKIN;
ConfiguredFeature* ConfiguredFeatures::PATCH_TAIGA_GRASS;
ConfiguredFeature* ConfiguredFeatures::PATCH_BERRY_BUSH;
ConfiguredFeature* ConfiguredFeatures::PATCH_GRASS_PLAIN;
ConfiguredFeature* ConfiguredFeatures::PATCH_GRASS_FOREST;
ConfiguredFeature* ConfiguredFeatures::PATCH_GRASS_BADLANDS;
ConfiguredFeature* ConfiguredFeatures::PATCH_GRASS_SAVANNA;
ConfiguredFeature* ConfiguredFeatures::PATCH_GRASS_NORMAL;
ConfiguredFeature* ConfiguredFeatures::PATCH_GRASS_TAIGA_2;
ConfiguredFeature* ConfiguredFeatures::PATCH_GRASS_TAIGA;
ConfiguredFeature* ConfiguredFeatures::PATCH_GRASS_JUNGLE;
ConfiguredFeature* ConfiguredFeatures::PATCH_DEAD_BUSH_2;
ConfiguredFeature* ConfiguredFeatures::PATCH_DEAD_BUSH;
ConfiguredFeature* ConfiguredFeatures::PATCH_DEAD_BUSH_BADLANDS;
ConfiguredFeature* ConfiguredFeatures::PATCH_MELON;
ConfiguredFeature* ConfiguredFeatures::PATCH_BERRY_SPARSE;
ConfiguredFeature* ConfiguredFeatures::PATCH_BERRY_DECORATED;
ConfiguredFeature* ConfiguredFeatures::PATCH_WATERLILLY;
ConfiguredFeature* ConfiguredFeatures::PATCH_TALL_GRASS_2;
ConfiguredFeature* ConfiguredFeatures::PATCH_TALL_GRASS;
ConfiguredFeature* ConfiguredFeatures::PATCH_LARGE_FERN;
ConfiguredFeature* ConfiguredFeatures::PATCH_CACTUS;
ConfiguredFeature* ConfiguredFeatures::PATCH_CACTUS_DESERT;
ConfiguredFeature* ConfiguredFeatures::PATCH_CACTUS_DECORATED;
ConfiguredFeature* ConfiguredFeatures::PATCH_SUGAR_CANE_SWAMP;
ConfiguredFeature* ConfiguredFeatures::PATCH_SUGAR_CANE_DESERT;
ConfiguredFeature* ConfiguredFeatures::PATCH_SUGAR_CANE_BADLANDS;
ConfiguredFeature* ConfiguredFeatures::PATCH_SUGAR_CANE;
ConfiguredFeature* ConfiguredFeatures::BROWN_MUSHROOM_NETHER;
ConfiguredFeature* ConfiguredFeatures::RED_MUSHROOM_NETHER;
ConfiguredFeature* ConfiguredFeatures::BROWN_MUSHROOM_NORMAL;
ConfiguredFeature* ConfiguredFeatures::RED_MUSHROOM_NORMAL;
ConfiguredFeature* ConfiguredFeatures::BROWN_MUSHROOM_TAIGA;
ConfiguredFeature* ConfiguredFeatures::RED_MUSHROOM_TAIGA;
ConfiguredFeature* ConfiguredFeatures::BROWN_MUSHROOM_GIANT;
ConfiguredFeature* ConfiguredFeatures::RED_MUSHROOM_GIANT;
ConfiguredFeature* ConfiguredFeatures::BROWN_MUSHROOM_SWAMP;
ConfiguredFeature* ConfiguredFeatures::RED_MUSHROOM_SWAMP;
ConfiguredFeature* ConfiguredFeatures::ORE_MAGMA;
ConfiguredFeature* ConfiguredFeatures::ORE_SOUL_SAND;
ConfiguredFeature* ConfiguredFeatures::ORE_GOLD_DELTAS;
ConfiguredFeature* ConfiguredFeatures::ORE_QUARTZ_DELTAS;
ConfiguredFeature* ConfiguredFeatures::ORE_GOLD_NETHER;
ConfiguredFeature* ConfiguredFeatures::ORE_QUARTZ_NETHER;
ConfiguredFeature* ConfiguredFeatures::ORE_GRAVEL_NETHER;
ConfiguredFeature* ConfiguredFeatures::ORE_BLACKSTONE;
ConfiguredFeature* ConfiguredFeatures::ORE_DIRT;
ConfiguredFeature* ConfiguredFeatures::ORE_GRAVEL;
ConfiguredFeature* ConfiguredFeatures::ORE_GRANITE;
ConfiguredFeature* ConfiguredFeatures::ORE_DIORITE;
ConfiguredFeature* ConfiguredFeatures::ORE_ANDESITE;
ConfiguredFeature* ConfiguredFeatures::ORE_COAL;
ConfiguredFeature* ConfiguredFeatures::ORE_IRON;
ConfiguredFeature* ConfiguredFeatures::ORE_GOLD_EXTRA;
ConfiguredFeature* ConfiguredFeatures::ORE_GOLD;
ConfiguredFeature* ConfiguredFeatures::ORE_REDSTONE;
ConfiguredFeature* ConfiguredFeatures::ORE_DIAMOND;
ConfiguredFeature* ConfiguredFeatures::ORE_LAPIS;
ConfiguredFeature* ConfiguredFeatures::ORE_INFESTED;
ConfiguredFeature* ConfiguredFeatures::ORE_EMERALD;
ConfiguredFeature* ConfiguredFeatures::ORE_DEBRIS_LARGE;
ConfiguredFeature* ConfiguredFeatures::ORE_DEBRIS_SMALL;
ConfiguredFeature* ConfiguredFeatures::CRIMSON_FUNGI;
ConfiguredFeature* ConfiguredFeatures::CRIMSON_FUNGI_PLANTED;
ConfiguredFeature* ConfiguredFeatures::WARPED_FUNGI;
ConfiguredFeature* ConfiguredFeatures::WARPED_FUNGI_PLANTED;
ConfiguredFeature* ConfiguredFeatures::HUGE_BROWN_MUSHROOM;
ConfiguredFeature* ConfiguredFeatures::HUGE_RED_MUSHROOM;
ConfiguredFeature* ConfiguredFeatures::OAK;
ConfiguredFeature* ConfiguredFeatures::DARK_OAK;
ConfiguredFeature* ConfiguredFeatures::BIRCH;
ConfiguredFeature* ConfiguredFeatures::ACACIA;
ConfiguredFeature* ConfiguredFeatures::SPRUCE;
ConfiguredFeature* ConfiguredFeatures::PINE;
ConfiguredFeature* ConfiguredFeatures::JUNGLE_TREE;
ConfiguredFeature* ConfiguredFeatures::FANCY_OAK;
ConfiguredFeature* ConfiguredFeatures::JUNGLE_TREE_NO_VINE;
ConfiguredFeature* ConfiguredFeatures::MEGA_JUNGLE_TREE;
ConfiguredFeature* ConfiguredFeatures::MEGA_SPRUCE;
ConfiguredFeature* ConfiguredFeatures::MEGA_PINE;
ConfiguredFeature* ConfiguredFeatures::SUPER_BIRCH_BEES_0002;
ConfiguredFeature* ConfiguredFeatures::SWAMP_TREE;
ConfiguredFeature* ConfiguredFeatures::JUNGLE_BUSH;
ConfiguredFeature* ConfiguredFeatures::OAK_BEES_0002;
ConfiguredFeature* ConfiguredFeatures::OAK_BEES_002;
ConfiguredFeature* ConfiguredFeatures::OAK_BEES_005;
ConfiguredFeature* ConfiguredFeatures::BIRCH_BEES_0002;
ConfiguredFeature* ConfiguredFeatures::BIRCH_BEES_002;
ConfiguredFeature* ConfiguredFeatures::BIRCH_BEES_005;
ConfiguredFeature* ConfiguredFeatures::FANCY_OAK_BEES_0002;
ConfiguredFeature* ConfiguredFeatures::FANCY_OAK_BEES_002;
ConfiguredFeature* ConfiguredFeatures::FANCY_OAK_BEES_005;
ConfiguredFeature* ConfiguredFeatures::OAK_BADLANDS;
ConfiguredFeature* ConfiguredFeatures::SPRUCE_SNOWY;
ConfiguredFeature* ConfiguredFeatures::FLOWER_WARM;
ConfiguredFeature* ConfiguredFeatures::FLOWER_DEFAULT;
ConfiguredFeature* ConfiguredFeatures::FLOWER_FOREST;
ConfiguredFeature* ConfiguredFeatures::FLOWER_SWAMP;
ConfiguredFeature* ConfiguredFeatures::FLOWER_PLAIN;
ConfiguredFeature* ConfiguredFeatures::FLOWER_PLAIN_DECORATED;
ConfiguredFeature* ConfiguredFeatures::FOREST_FLOWER_VEGETATION_COMMON;
ConfiguredFeature* ConfiguredFeatures::FOREST_FLOWER_VEGETATION;
ConfiguredFeature* ConfiguredFeatures::DARK_FOREST_VEGETATION_BROWN;
ConfiguredFeature* ConfiguredFeatures::DARK_FOREST_VEGETATION_RED;
ConfiguredFeature* ConfiguredFeatures::WARM_OCEAN_VEGETATION;
ConfiguredFeature* ConfiguredFeatures::FOREST_FLOWER_TREES;
ConfiguredFeature* ConfiguredFeatures::TAIGA_VEGETATION;
ConfiguredFeature* ConfiguredFeatures::TREES_SHATTERED_SAVANNA;
ConfiguredFeature* ConfiguredFeatures::TREES_SAVANNA;
ConfiguredFeature* ConfiguredFeatures::BIRCH_TALL;
ConfiguredFeature* ConfiguredFeatures::TREES_BIRCH;
ConfiguredFeature* ConfiguredFeatures::TREES_MOUNTAIN_EDGE;
ConfiguredFeature* ConfiguredFeatures::TREES_MOUNTAIN;
ConfiguredFeature* ConfiguredFeatures::TREES_WATER;
ConfiguredFeature* ConfiguredFeatures::BIRCH_OTHER;
ConfiguredFeature* ConfiguredFeatures::PLAIN_VEGETATION;
ConfiguredFeature* ConfiguredFeatures::TREES_JUNGLE_EDGE;
ConfiguredFeature* ConfiguredFeatures::TREES_GIANT_SPRUCE;
ConfiguredFeature* ConfiguredFeatures::TREES_GIANT;
ConfiguredFeature* ConfiguredFeatures::TREES_JUNGLE;
ConfiguredFeature* ConfiguredFeatures::BAMBOO_VEGETATION;
ConfiguredFeature* ConfiguredFeatures::MUSHROOM_FIELD_VEGETATION;

static ConfiguredFeature* registerFeature(std::string name, ConfiguredFeature* feature) {
    ConfiguredFeatures::features.emplace(std::move(name), feature);
    return feature;
}

void ConfiguredFeatures::configureFeatures() {
// END_SPIKE = createFeature("end_spike", Features::END_SPIKE.withConfiguration(new EndSpikeFeatureConfig(false, ImmutableList.of(), null)));
// END_GATEWAY = createFeature("end_gateway", Features::END_GATEWAY.withConfiguration(EndGatewayConfig.func_214702_a(ServerWorld.field_241108_a_, true)).withPlacement(Placement.END_GATEWAY.configure(IPlacementConfig.NO_PLACEMENT_CONFIG)));
// END_GATEWAY_DELAYED = createFeature("end_gateway_delayed", Features::END_GATEWAY.withConfiguration(EndGatewayConfig.func_214698_a()));
// CHORUS_PLANT = createFeature("chorus_plant", Features::CHORUS_PLANT.withConfiguration(NoFeatureConfig{}).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).func_242732_c(4));
// END_ISLAND = createFeature("end_island", Features::END_ISLAND.withConfiguration(NoFeatureConfig{}));
// END_ISLAND_DECORATED = createFeature("end_island_decorated", END_ISLAND.withPlacement(Placement.END_ISLAND.configure(IPlacementConfig.NO_PLACEMENT_CONFIG)));
// DELTA = createFeature("delta", Features::DELTA_FEATURE::withConfiguration(new BasaltDeltasFeature(Features.States.LAVA_BLOCK, Features.States.MAGMA_BLOCK, FeatureSpread.create(3, 4), FeatureSpread.create(0, 2))).withPlacement(Placement.COUNT_MULTILAYER.configure(new FeatureSpreadConfig(40))));
// SMALL_BASALT_COLUMNS = createFeature("small_basalt_columns", Features::BASALT_COLUMNS.withConfiguration(new ColumnConfig(FeatureSpread.create(1), FeatureSpread.create(1, 3))).withPlacement(Placement.COUNT_MULTILAYER.configure(new FeatureSpreadConfig(4))));
// LARGE_BASALT_COLUMNS = createFeature("large_basalt_columns", Features::BASALT_COLUMNS.withConfiguration(new ColumnConfig(FeatureSpread.create(2, 1), FeatureSpread.create(5, 5))).withPlacement(Placement.COUNT_MULTILAYER.configure(new FeatureSpreadConfig(2))));
// BASALT_BLOBS = createFeature("basalt_blobs", Features::NETHERRACK_REPLACE_BLOBS.withConfiguration(new BlobReplacementConfig(Features.States.NETHERRACK, Features.States.BASALT, FeatureSpread.create(3, 4))).range(128).square().withSpreadPlacement(75));
// BLACKSTONE_BLOBS = createFeature("blackstone_blobs", Features::NETHERRACK_REPLACE_BLOBS.withConfiguration(new BlobReplacementConfig(Features.States.NETHERRACK, Features.States.BLACKSTONE, FeatureSpread.create(3, 4))).range(128).square().withSpreadPlacement(25));
// GLOWSTONE_EXTRA = createFeature("glowstone_extra", Features::GLOWSTONE_BLOB.withConfiguration(NoFeatureConfig{}).withPlacement(Placement.GLOWSTONE.configure(new FeatureSpreadConfig(10))));
// GLOWSTONE = createFeature("glowstone", Features::GLOWSTONE_BLOB.withConfiguration(NoFeatureConfig{}).range(128).square().withSpreadPlacement(10));
// CRIMSON_FOREST_VEGETATION = createFeature("crimson_forest_vegetation", Features::NETHER_FOREST_VEGETATION.withConfiguration(Features.Configs.CRIMSON_FOREST_VEGETATION_CONFIG).withPlacement(Placement.COUNT_MULTILAYER.configure(new FeatureSpreadConfig(6))));
// WARPED_FOREST_VEGETATION = createFeature("warped_forest_vegetation", Features::NETHER_FOREST_VEGETATION.withConfiguration(Features.Configs.WARPED_FOREST_VEGETATION_CONFIG).withPlacement(Placement.COUNT_MULTILAYER.configure(new FeatureSpreadConfig(5))));
// NETHER_SPROUTS = createFeature("nether_sprouts", Features::NETHER_FOREST_VEGETATION.withConfiguration(Features.Configs.NETHER_SPROUTS_CONFIG).withPlacement(Placement.COUNT_MULTILAYER.configure(new FeatureSpreadConfig(4))));
// TWISTING_VINES = createFeature("twisting_vines", Features::TWISTING_VINES.withConfiguration(NoFeatureConfig{}).range(128).square().withSpreadPlacement(10));
// WEEPING_VINES = createFeature("weeping_vines", Features::WEEPING_VINES.withConfiguration(NoFeatureConfig{}).range(128).square().withSpreadPlacement(10));
// BASALT_PILLAR = createFeature("basalt_pillar", Features::BASALT_PILLAR.withConfiguration(NoFeatureConfig{}).range(128).square().withSpreadPlacement(10));
// SEAGRASS_COLD = createFeature("seagrass_cold", Features::SEAGRASS.withConfiguration(new ProbabilityConfig(0.3F)).withSpreadPlacement(32).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));
// SEAGRASS_DEEP_COLD = createFeature("seagrass_deep_cold", Features::SEAGRASS.withConfiguration(new ProbabilityConfig(0.8F)).withSpreadPlacement(40).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));
// SEAGRASS_NORMAL = createFeature("seagrass_normal", Features::SEAGRASS.withConfiguration(new ProbabilityConfig(0.3F)).withSpreadPlacement(48).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));
// SEAGRASS_RIVER = createFeature("seagrass_river", Features::SEAGRASS.withConfiguration(new ProbabilityConfig(0.4F)).withSpreadPlacement(48).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));
// SEAGRASS_DEEP = createFeature("seagrass_deep", Features::SEAGRASS.withConfiguration(new ProbabilityConfig(0.8F)).withSpreadPlacement(48).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));
// SEAGRASS_SWAMP = createFeature("seagrass_swamp", Features::SEAGRASS.withConfiguration(new ProbabilityConfig(0.6F)).withSpreadPlacement(64).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));
// SEAGRASS_WARM = createFeature("seagrass_warm", Features::SEAGRASS.withConfiguration(new ProbabilityConfig(0.3F)).withSpreadPlacement(80).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));
// SEAGRASS_DEEP_WARM = createFeature("seagrass_deep_warm", Features::SEAGRASS.withConfiguration(new ProbabilityConfig(0.8F)).withSpreadPlacement(80).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));
// SEA_PICKLE = createFeature("sea_pickle", Features::SEA_PICKLE.withConfiguration(new FeatureSpreadConfig(20)).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT).chance(16));
// ICE_SPIKE = createFeature("ice_spike", Features::ICE_SPIKE.withConfiguration(NoFeatureConfig{}).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withSpreadPlacement(3));
// ICE_PATCH = createFeature("ice_patch", Features::ICE_PATCH.withConfiguration(new SphereReplaceConfig(Features.States.PACKED_ICE, FeatureSpread.create(2, 1), 1, ImmutableList.of(Features.States.DIRT, Features.States.GRASS_BLOCK, Features.States.PODZOL, Features.States.COARSE_DIRT, Features.States.MYCELIUM, Features.States.SNOW_BLOCK, Features.States.ICE))).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withSpreadPlacement(2));
// FOREST_ROCK = createFeature("forest_rock", Features::FOREST_ROCK.withConfiguration(new BlockStateFeatureConfig(Features.States.MOSSY_COBBLESTONE)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).func_242732_c(2));
// SEAGRASS_SIMPLE = createFeature("seagrass_simple", Features::SIMPLE_BLOCK.withConfiguration(new BlockWithContextConfig(Features.States.SEAGRASS, ImmutableList.of(Features.States.STONE), ImmutableList.of(Features.States.WATER_BLOCK), ImmutableList.of(Features.States.WATER_BLOCK))).withPlacement(Placement.CARVING_MASK.configure(new CaveEdgeConfig(GenerationStage.Carving.LIQUID, 0.1F))));
// ICEBERG_PACKED = createFeature("iceberg_packed", Features::ICEBERG.withConfiguration(new BlockStateFeatureConfig(Features.States.PACKED_ICE)).withPlacement(Placement.ICEBERG.configure(NoPlacementConfig.INSTANCE)).chance(16));
// ICEBERG_BLUE = createFeature("iceberg_blue", Features::ICEBERG.withConfiguration(new BlockStateFeatureConfig(Features.States.BLUE_ICE)).withPlacement(Placement.ICEBERG.configure(NoPlacementConfig.INSTANCE)).chance(200));
// KELP_COLD = createFeature("kelp_cold", Features::KELP.withConfiguration(NoFeatureConfig{}).withPlacement(Features.Placements.KELP_PLACEMENT).square().withPlacement(Placement.COUNT_NOISE_BIASED.configure(new TopSolidWithNoiseConfig(120, 80.0D, 0.0D))));
// KELP_WARM = createFeature("kelp_warm", Features::KELP.withConfiguration(NoFeatureConfig{}).withPlacement(Features.Placements.KELP_PLACEMENT).square().withPlacement(Placement.COUNT_NOISE_BIASED.configure(new TopSolidWithNoiseConfig(80, 80.0D, 0.0D))));
// BLUE_ICE = createFeature("blue_ice", Features::BLUE_ICE.withConfiguration(NoFeatureConfig{}).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(30, 32, 64))).square().func_242732_c(19));
// BAMBOO_LIGHT = createFeature("bamboo_light", Features::BAMBOO.withConfiguration(new ProbabilityConfig(0.0F)).withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(16));
// BAMBOO = createFeature("bamboo", Features::BAMBOO.withConfiguration(new ProbabilityConfig(0.2F)).withPlacement(Features.Placements.BAMBOO_PLACEMENT).square().withPlacement(Placement.COUNT_NOISE_BIASED.configure(new TopSolidWithNoiseConfig(160, 80.0D, 0.3D))));
// VINES = createFeature("vines", Features::VINES.withConfiguration(NoFeatureConfig{}).square().withSpreadPlacement(50));
// LAKE_WATER = createFeature("lake_water", Features::LAKE.withConfiguration(new BlockStateFeatureConfig(Features.States.WATER_BLOCK)).withPlacement(Placement.WATER_LAKE.configure(new ChanceConfig(4))));
// LAKE_LAVA = createFeature("lake_lava", Features::LAKE.withConfiguration(new BlockStateFeatureConfig(Features.States.LAVA_BLOCK)).withPlacement(Placement.LAVA_LAKE.configure(new ChanceConfig(80))));
// DISK_CLAY = createFeature("disk_clay", Features::DISK.withConfiguration(new SphereReplaceConfig(Features.States.CLAY, FeatureSpread.create(2, 1), 1, ImmutableList.of(Features.States.DIRT, Features.States.CLAY))).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));
// DISK_GRAVEL = createFeature("disk_gravel", Features::DISK.withConfiguration(new SphereReplaceConfig(Features.States.GRAVEL, FeatureSpread.create(2, 3), 2, ImmutableList.of(Features.States.DIRT, Features.States.GRASS_BLOCK))).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));
// DISK_SAND = createFeature("disk_sand", Features::DISK.withConfiguration(new SphereReplaceConfig(Features.States.SAND, FeatureSpread.create(2, 4), 2, ImmutableList.of(Features.States.DIRT, Features.States.GRASS_BLOCK))).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT).withSpreadPlacement(3));
 FREEZE_TOP_LAYER = registerFeature("freeze_top_layer", Features::FREEZE_TOP_LAYER->withConfiguration(NoFeatureConfig{}));
// BONUS_CHEST = createFeature("bonus_chest", Features::BONUS_CHEST.withConfiguration(NoFeatureConfig{}));
// VOID_START_PLATFORM = createFeature("void_start_platform", Features::VOID_START_PLATFORM.withConfiguration(NoFeatureConfig{}));
// MONSTER_ROOM = createFeature("monster_room", Features::MONSTER_ROOM.withConfiguration(NoFeatureConfig{}).range(256).square().withSpreadPlacement(8));
// DESERT_WELL = createFeature("desert_well", Features::DESERT_WELL.withConfiguration(NoFeatureConfig{}).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).chance(1000));
// FOSSIL = createFeature("fossil", Features::FOSSIL.withConfiguration(NoFeatureConfig{}).chance(64));
// SPRING_LAVA_DOUBLE = createFeature("spring_lava_double", Features::SPRING_FEATURE::withConfiguration(Features.Configs.LAVA_SPRING_CONFIG).withPlacement(Placement.RANGE_VERY_BIASED.configure(new TopSolidRangeConfig(8, 16, 256))).square().withSpreadPlacement(40));
// SPRING_LAVA = createFeature("spring_lava", Features::SPRING_FEATURE::withConfiguration(Features.Configs.LAVA_SPRING_CONFIG).withPlacement(Placement.RANGE_VERY_BIASED.configure(new TopSolidRangeConfig(8, 16, 256))).square().withSpreadPlacement(20));
// SPRING_DELTA = createFeature("spring_delta", Features::SPRING_FEATURE::withConfiguration(new LiquidsConfig(Features.States.LAVA, true, 4, 1, ImmutableSet.of(Blocks.NETHERRACK, Blocks.SOUL_SAND, Blocks.GRAVEL, Blocks.MAGMA_BLOCK, Blocks.BLACKSTONE))).withPlacement(Features.Placements.SPRING_PLACEMENT).square().withSpreadPlacement(16));
// SPRING_CLOSED = createFeature("spring_closed", Features::SPRING_FEATURE::withConfiguration(Features.Configs.CLOSED_SPRING_CONFIG).withPlacement(Features.Placements.NETHER_SPRING_ORE_PLACEMENT).square().withSpreadPlacement(16));
// SPRING_CLOSED_DOUBLE = createFeature("spring_closed_double", Features::SPRING_FEATURE::withConfiguration(Features.Configs.CLOSED_SPRING_CONFIG).withPlacement(Features.Placements.NETHER_SPRING_ORE_PLACEMENT).square().withSpreadPlacement(32));
// SPRING_OPEN = createFeature("spring_open", Features::SPRING_FEATURE::withConfiguration(new LiquidsConfig(Features.States.LAVA, false, 4, 1, ImmutableSet.of(Blocks.NETHERRACK))).withPlacement(Features.Placements.SPRING_PLACEMENT).square().withSpreadPlacement(8));
// SPRING_WATER = createFeature("spring_water", Features::SPRING_FEATURE::withConfiguration(new LiquidsConfig(Features.States.WATER, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE))).withPlacement(Placement.RANGE_BIASED.configure(new TopSolidRangeConfig(8, 8, 256))).square().withSpreadPlacement(50));
// PILE_HAY = createFeature("pile_hay", Features::BLOCK_PILE.withConfiguration(new BlockStateProvidingFeatureConfig(new AxisRotatingBlockStateProvider(Blocks.HAY_BLOCK))));
// PILE_MELON = createFeature("pile_melon", Features::BLOCK_PILE.withConfiguration(new BlockStateProvidingFeatureConfig(new SimpleBlockStateProvider(Features.States.MELON))));
// PILE_SNOW = createFeature("pile_snow", Features::BLOCK_PILE.withConfiguration(new BlockStateProvidingFeatureConfig(new SimpleBlockStateProvider(Features.States.SNOW))));
// PILE_ICE = createFeature("pile_ice", Features::BLOCK_PILE.withConfiguration(new BlockStateProvidingFeatureConfig((new WeightedBlockStateProvider()).addWeightedBlockstate(Features.States.BLUE_ICE, 1).addWeightedBlockstate(Features.States.PACKED_ICE, 5))));
// PILE_PUMPKIN = createFeature("pile_pumpkin", Features::BLOCK_PILE.withConfiguration(new BlockStateProvidingFeatureConfig((new WeightedBlockStateProvider()).addWeightedBlockstate(Features.States.PUMPKIN, 19).addWeightedBlockstate(Features.States.JACK_O_LANTERN, 1))));
// PATCH_FIRE = createFeature("patch_fire", Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.FIRE), SimpleBlockPlacer.PLACER)).tries(64).whitelist(ImmutableSet.of(Features.States.NETHERRACK.getBlock())).func_227317_b_().build()).withPlacement(Features.Placements.FIRE_PLACEMENT));
// PATCH_SOUL_FIRE = createFeature("patch_soul_fire", Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.SOUL_FIRE), new SimpleBlockPlacer())).tries(64).whitelist(ImmutableSet.of(Features.States.SOUL_SOIL.getBlock())).func_227317_b_().build()).withPlacement(Features.Placements.FIRE_PLACEMENT));
// PATCH_BROWN_MUSHROOM = createFeature("patch_brown_mushroom", Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.BROWN_MUSHROOM), SimpleBlockPlacer.PLACER)).tries(64).func_227317_b_().build()));
// PATCH_RED_MUSHROOM = createFeature("patch_red_mushroom", Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.RED_MUSHROOM), SimpleBlockPlacer.PLACER)).tries(64).func_227317_b_().build()));
// PATCH_CRIMSON_ROOTS = createFeature("patch_crimson_roots", Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.CRIMSON_ROOTS), new SimpleBlockPlacer())).tries(64).func_227317_b_().build()).range(128));
// PATCH_SUNFLOWER = createFeature("patch_sunflower", Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.SUNFLOWER), new DoublePlantBlockPlacer())).tries(64).func_227317_b_().build()).withPlacement(Features.Placements. VEGETATION_PLACEMENT).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withSpreadPlacement(10));
// PATCH_PUMPKIN = createFeature("patch_pumpkin", Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.PUMPKIN), SimpleBlockPlacer.PLACER)).tries(64).whitelist(ImmutableSet.of(Features.States.GRASS_BLOCK.getBlock())).func_227317_b_().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).chance(32));
// PATCH_TAIGA_GRASS = createFeature("patch_taiga_grass", Features::RANDOM_PATCH.withConfiguration(Features.Configs.TAIGA_GRASS_CONFIG));
// PATCH_BERRY_BUSH = createFeature("patch_berry_bush", Features::RANDOM_PATCH.withConfiguration(Features.Configs.BERRY_BUSH_PATCH_CONFIG));
// PATCH_GRASS_PLAIN = createFeature("patch_grass_plain", Features::RANDOM_PATCH.withConfiguration(Features.Configs.GRASS_PATCH_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT).withPlacement(Placement.COUNT_NOISE.configure(new NoiseDependant(-0.8D, 5, 10))));
// PATCH_GRASS_FOREST = createFeature("patch_grass_forest", Features::RANDOM_PATCH.withConfiguration(Features.Configs.GRASS_PATCH_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(2));
// PATCH_GRASS_BADLANDS = createFeature("patch_grass_badlands", Features::RANDOM_PATCH.withConfiguration(Features.Configs.GRASS_PATCH_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT));
// PATCH_GRASS_SAVANNA = createFeature("patch_grass_savanna", Features::RANDOM_PATCH.withConfiguration(Features.Configs.GRASS_PATCH_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(20));
// PATCH_GRASS_NORMAL = createFeature("patch_grass_normal", Features::RANDOM_PATCH.withConfiguration(Features.Configs.GRASS_PATCH_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(5));
// PATCH_GRASS_TAIGA_2 = createFeature("patch_grass_taiga_2", Features::RANDOM_PATCH.withConfiguration(Features.Configs.TAIGA_GRASS_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT));
// PATCH_GRASS_TAIGA = createFeature("patch_grass_taiga", Features::RANDOM_PATCH.withConfiguration(Features.Configs.TAIGA_GRASS_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(7));
// PATCH_GRASS_JUNGLE = createFeature("patch_grass_jungle", Features::RANDOM_PATCH.withConfiguration(Features.Configs.JUNGLE_VEGETATION_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(25));
// PATCH_DEAD_BUSH_2 = createFeature("patch_dead_bush_2", Features::RANDOM_PATCH.withConfiguration(Features.Configs.DEAD_BUSH_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(2));
// PATCH_DEAD_BUSH = createFeature("patch_dead_bush", Features::RANDOM_PATCH.withConfiguration(Features.Configs.DEAD_BUSH_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT));
// PATCH_DEAD_BUSH_BADLANDS = createFeature("patch_dead_bush_badlands", Features::RANDOM_PATCH.withConfiguration(Features.Configs.DEAD_BUSH_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(20));
// PATCH_MELON = createFeature("patch_melon", Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.MELON), SimpleBlockPlacer.PLACER)).tries(64).whitelist(ImmutableSet.of(Features.States.GRASS_BLOCK.getBlock())).replaceable().func_227317_b_().build()).withPlacement(Features.Placements.PATCH_PLACEMENT));
// PATCH_BERRY_SPARSE = createFeature("patch_berry_sparse", PATCH_BERRY_BUSH.withPlacement(Features.Placements.PATCH_PLACEMENT));
// PATCH_BERRY_DECORATED = createFeature("patch_berry_decorated", PATCH_BERRY_BUSH.withPlacement(Features.Placements.PATCH_PLACEMENT).chance(12));
// PATCH_WATERLILLY = createFeature("patch_waterlilly", Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.LILY_PAD), SimpleBlockPlacer.PLACER)).tries(10).build()).withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(4));
// PATCH_TALL_GRASS_2 = createFeature("patch_tall_grass_2", Features::RANDOM_PATCH.withConfiguration(Features.Configs.TALL_GRASS_CONFIG).withPlacement(Features.Placements.VEGETATION_PLACEMENT).withPlacement(Features.Placements.FLOWER_TALL_GRASS_PLACEMENT).square().withPlacement(Placement.COUNT_NOISE.configure(new NoiseDependant(-0.8D, 0, 7))));
// PATCH_TALL_GRASS = createFeature("patch_tall_grass", Features::RANDOM_PATCH.withConfiguration(Features.Configs.TALL_GRASS_CONFIG).withPlacement(Features.Placements.VEGETATION_PLACEMENT).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withSpreadPlacement(7));
// PATCH_LARGE_FERN = createFeature("patch_large_fern", Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.LARGE_FERN), new DoublePlantBlockPlacer())).tries(64).func_227317_b_().build()).withPlacement(Features.Placements.VEGETATION_PLACEMENT).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withSpreadPlacement(7));
// PATCH_CACTUS = createFeature("patch_cactus", Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.CACTUS), new ColumnBlockPlacer(1, 2))).tries(10).func_227317_b_().build()));
// PATCH_CACTUS_DESERT = createFeature("patch_cactus_desert", PATCH_CACTUS.withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(10));
// PATCH_CACTUS_DECORATED = createFeature("patch_cactus_decorated", PATCH_CACTUS.withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(5));
// PATCH_SUGAR_CANE_SWAMP = createFeature("patch_sugar_cane_swamp", Features::RANDOM_PATCH.withConfiguration(Features.Configs.SUGAR_CANE_PATCH_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(20));
// PATCH_SUGAR_CANE_DESERT = createFeature("patch_sugar_cane_desert", Features::RANDOM_PATCH.withConfiguration(Features.Configs.SUGAR_CANE_PATCH_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(60));
// PATCH_SUGAR_CANE_BADLANDS = createFeature("patch_sugar_cane_badlands", Features::RANDOM_PATCH.withConfiguration(Features.Configs.SUGAR_CANE_PATCH_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(13));
// PATCH_SUGAR_CANE = createFeature("patch_sugar_cane", Features::RANDOM_PATCH.withConfiguration(Features.Configs.SUGAR_CANE_PATCH_CONFIG).withPlacement(Features.Placements.PATCH_PLACEMENT).withSpreadPlacement(10));
// BROWN_MUSHROOM_NETHER = createFeature("brown_mushroom_nether", PATCH_BROWN_MUSHROOM.range(128).chance(2));
// RED_MUSHROOM_NETHER = createFeature("red_mushroom_nether", PATCH_RED_MUSHROOM.range(128).chance(2));
// BROWN_MUSHROOM_NORMAL = createFeature("brown_mushroom_normal", PATCH_BROWN_MUSHROOM.withPlacement(Features.Placements.PATCH_PLACEMENT).chance(4));
// RED_MUSHROOM_NORMAL = createFeature("red_mushroom_normal", PATCH_RED_MUSHROOM.withPlacement(Features.Placements.PATCH_PLACEMENT).chance(8));
// BROWN_MUSHROOM_TAIGA = createFeature("brown_mushroom_taiga", PATCH_BROWN_MUSHROOM.chance(4).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT));
// RED_MUSHROOM_TAIGA = createFeature("red_mushroom_taiga", PATCH_RED_MUSHROOM.chance(8).withPlacement(Features.Placements.PATCH_PLACEMENT));
// BROWN_MUSHROOM_GIANT = createFeature("brown_mushroom_giant", BROWN_MUSHROOM_TAIGA.withSpreadPlacement(3));
// RED_MUSHROOM_GIANT = createFeature("red_mushroom_giant", RED_MUSHROOM_TAIGA.withSpreadPlacement(3));
// BROWN_MUSHROOM_SWAMP = createFeature("brown_mushroom_swamp", BROWN_MUSHROOM_TAIGA.withSpreadPlacement(8));
// RED_MUSHROOM_SWAMP = createFeature("red_mushroom_swamp", RED_MUSHROOM_TAIGA.withSpreadPlacement(8));
// ORE_MAGMA = createFeature("ore_magma", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.NETHERRACK, Features.States.MAGMA_BLOCK, 33)).withPlacement(Placement.MAGMA.configure(NoPlacementConfig.INSTANCE)).square().withSpreadPlacement(4));
// ORE_SOUL_SAND = createFeature("ore_soul_sand", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.NETHERRACK, Features.States.SOUL_SAND, 12)).range(32).square().withSpreadPlacement(12));
// ORE_GOLD_DELTAS = createFeature("ore_gold_deltas", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.NETHERRACK, Features.States.NETHER_GOLD_ORE, 10)).withPlacement(Features.Placements.NETHER_SPRING_ORE_PLACEMENT).square().withSpreadPlacement(20));
// ORE_QUARTZ_DELTAS = createFeature("ore_quartz_deltas", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.NETHERRACK, Features.States.NETHER_QUARTZ_ORE, 14)).withPlacement(Features.Placements.NETHER_SPRING_ORE_PLACEMENT).square().withSpreadPlacement(32));
// ORE_GOLD_NETHER = createFeature("ore_gold_nether", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.NETHERRACK, Features.States.NETHER_GOLD_ORE, 10)).withPlacement(Features.Placements.NETHER_SPRING_ORE_PLACEMENT).square().withSpreadPlacement(10));
// ORE_QUARTZ_NETHER = createFeature("ore_quartz_nether", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.NETHERRACK, Features.States.NETHER_QUARTZ_ORE, 14)).withPlacement(Features.Placements.NETHER_SPRING_ORE_PLACEMENT).square().withSpreadPlacement(16));
// ORE_GRAVEL_NETHER = createFeature("ore_gravel_nether", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.NETHERRACK, Features.States.GRAVEL, 33)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(5, 0, 37))).square().withSpreadPlacement(2));
// ORE_BLACKSTONE = createFeature("ore_blackstone", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.NETHERRACK, Features.States.BLACKSTONE, 33)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(5, 10, 37))).square().withSpreadPlacement(2));
// ORE_DIRT = createFeature("ore_dirt", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_OVERWORLD, Features.States.DIRT, 33)).range(256).square().withSpreadPlacement(10));
// ORE_GRAVEL = createFeature("ore_gravel", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_OVERWORLD, Features.States.GRAVEL, 33)).range(256).square().withSpreadPlacement(8));
// ORE_GRANITE = createFeature("ore_granite", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_OVERWORLD, Features.States.GRANITE, 33)).range(80).square().withSpreadPlacement(10));
// ORE_DIORITE = createFeature("ore_diorite", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_OVERWORLD, Features.States.DIORITE, 33)).range(80).square().withSpreadPlacement(10));
// ORE_ANDESITE = createFeature("ore_andesite", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_OVERWORLD, Features.States.ANDESITE, 33)).range(80).square().withSpreadPlacement(10));
// ORE_COAL = createFeature("ore_coal", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_OVERWORLD, Features.States.COAL_ORE, 17)).range(128).square().withSpreadPlacement(20));
// ORE_IRON = createFeature("ore_iron", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_OVERWORLD, Features.States.IRON_ORE, 9)).range(64).square().withSpreadPlacement(20));
// ORE_GOLD_EXTRA = createFeature("ore_gold_extra", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_OVERWORLD, Features.States.GOLD_ORE, 9)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 32, 80))).square().withSpreadPlacement(20));
// ORE_GOLD = createFeature("ore_gold", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_OVERWORLD, Features.States.GOLD_ORE, 9)).range(32).square().withSpreadPlacement(2));
// ORE_REDSTONE = createFeature("ore_redstone", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_OVERWORLD, Features.States.REDSTONE_ORE, 8)).range(16).square().withSpreadPlacement(8));
// ORE_DIAMOND = createFeature("ore_diamond", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_OVERWORLD, Features.States.DIAMOND_ORE, 8)).range(16).square());
// ORE_LAPIS = createFeature("ore_lapis", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_OVERWORLD, Features.States.LAPIS_ORE, 7)).withPlacement(Placement.DEPTH_AVERAGE.configure(new DepthAverageConfig(16, 16))).square());
// ORE_INFESTED = createFeature("ore_infested", Features::ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_OVERWORLD, Features.States.INFESTED_STONE, 9)).range(64).square().withSpreadPlacement(7));
// ORE_EMERALD = createFeature("ore_emerald", Features::EMERALD_ORE.withConfiguration(new ReplaceBlockConfig(Features.States.STONE, Features.States.EMERALD_ORE)).withPlacement(Placement.EMERALD_ORE.configure(IPlacementConfig.NO_PLACEMENT_CONFIG)));
// ORE_DEBRIS_LARGE = createFeature("ore_debris_large", Features::NO_SURFACE_ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_NETHER, Features.States.ANCIENT_DEBRIS, 3)).withPlacement(Placement.DEPTH_AVERAGE.configure(new DepthAverageConfig(16, 8))).square());
// ORE_DEBRIS_SMALL = createFeature("ore_debris_small", Features::NO_SURFACE_ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.BASE_STONE_NETHER, Features.States.ANCIENT_DEBRIS, 2)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(8, 16, 128))).square());
// CRIMSON_FUNGI = createFeature("crimson_fungi", Features::HUGE_FUNGUS.withConfiguration(HugeFungusConfig.field_236300_c_).withPlacement(Placement.COUNT_MULTILAYER.configure(new FeatureSpreadConfig(8))));
// CRIMSON_FUNGI_PLANTED = createFeature("crimson_fungi_planted", Features::HUGE_FUNGUS.withConfiguration(HugeFungusConfig.field_236299_b_));
// WARPED_FUNGI = createFeature("warped_fungi", Features::HUGE_FUNGUS.withConfiguration(HugeFungusConfig.field_236302_e_).withPlacement(Placement.COUNT_MULTILAYER.configure(new FeatureSpreadConfig(8))));
// WARPED_FUNGI_PLANTED = createFeature("warped_fungi_planted", Features::HUGE_FUNGUS.withConfiguration(HugeFungusConfig.field_236301_d_));
// HUGE_BROWN_MUSHROOM = createFeature("huge_brown_mushroom", Features::HUGE_BROWN_MUSHROOM.withConfiguration(new BigMushroomFeatureConfig(new SimpleBlockStateProvider(Features.States.BROWN_MUSHROOM_BLOCK_UP), new SimpleBlockStateProvider(Features.States.MUSHROOM_STEM), 3)));
// HUGE_RED_MUSHROOM = createFeature("huge_red_mushroom", Features::HUGE_RED_MUSHROOM.withConfiguration(new BigMushroomFeatureConfig(new SimpleBlockStateProvider(Features.States.RED_MUSHROOM_BLOCK_DOWN), new SimpleBlockStateProvider(Features.States.MUSHROOM_STEM), 2)));
// OAK = createFeature("oak", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.OAK_LOG), new SimpleBlockStateProvider(Features.States.OAK_LEAVES), new BlobFoliagePlacer(FeatureSpread.create(2), FeatureSpread.create(0), 3), new StraightTrunkPlacer(4, 2, 0), new TwoLayerFeature(1, 0, 1))).setIgnoreVines().build()));
// DARK_OAK = createFeature("dark_oak", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.DARK_OAK_LOG), new SimpleBlockStateProvider(Features.States.DARK_OAK_LEAVES), new DarkOakFoliagePlacer(FeatureSpread.create(0), FeatureSpread.create(0)), new DarkOakTrunkPlacer(6, 2, 1), new ThreeLayerFeature(1, 1, 0, 1, 2, OptionalInt.empty()))).setMaxWaterDepth(Integer.MAX_VALUE).func_236702_a_(Heightmap.Type.MOTION_BLOCKING).setIgnoreVines().build()));
// BIRCH = createFeature("birch", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.BIRCH_LOG), new SimpleBlockStateProvider(Features.States.BIRCH_LEAVES), new BlobFoliagePlacer(FeatureSpread.create(2), FeatureSpread.create(0), 3), new StraightTrunkPlacer(5, 2, 0), new TwoLayerFeature(1, 0, 1))).setIgnoreVines().build()));
// ACACIA = createFeature("acacia", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.ACACIA_LOG), new SimpleBlockStateProvider(Features.States.ACACIA_LEAVES), new AcaciaFoliagePlacer(FeatureSpread.create(2), FeatureSpread.create(0)), new ForkyTrunkPlacer(5, 2, 2), new TwoLayerFeature(1, 0, 2))).setIgnoreVines().build()));
// SPRUCE = createFeature("spruce", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.SPRUCE_LOG), new SimpleBlockStateProvider(Features.States.SPRUCE_LEAVES), new SpruceFoliagePlacer(FeatureSpread.create(2, 1), FeatureSpread.create(0, 2), FeatureSpread.create(1, 1)), new StraightTrunkPlacer(5, 2, 1), new TwoLayerFeature(2, 0, 2))).setIgnoreVines().build()));
// PINE = createFeature("pine", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.SPRUCE_LOG), new SimpleBlockStateProvider(Features.States.SPRUCE_LEAVES), new PineFoliagePlacer(FeatureSpread.create(1), FeatureSpread.create(1), FeatureSpread.create(3, 1)), new StraightTrunkPlacer(6, 4, 0), new TwoLayerFeature(2, 0, 2))).setIgnoreVines().build()));
// JUNGLE_TREE = createFeature("jungle_tree", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.JUNGLE_LOG), new SimpleBlockStateProvider(Features.States.JUNGLE_LEAVES), new BlobFoliagePlacer(FeatureSpread.create(2), FeatureSpread.create(0), 3), new StraightTrunkPlacer(4, 8, 0), new TwoLayerFeature(1, 0, 1))).setDecorators(ImmutableList.of(new CocoaTreeDecorator(0.2F), TrunkVineTreeDecorator.field_236879_b_, LeaveVineTreeDecorator.field_236871_b_)).setIgnoreVines().build()));
// FANCY_OAK = createFeature("fancy_oak", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.OAK_LOG), new SimpleBlockStateProvider(Features.States.OAK_LEAVES), new FancyFoliagePlacer(FeatureSpread.create(2), FeatureSpread.create(4), 4), new FancyTrunkPlacer(3, 11, 0), new TwoLayerFeature(0, 0, 0, OptionalInt.of(4)))).setIgnoreVines().func_236702_a_(Heightmap.Type.MOTION_BLOCKING).build()));
// JUNGLE_TREE_NO_VINE = createFeature("jungle_tree_no_vine", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.JUNGLE_LOG), new SimpleBlockStateProvider(Features.States.JUNGLE_LEAVES), new BlobFoliagePlacer(FeatureSpread.create(2), FeatureSpread.create(0), 3), new StraightTrunkPlacer(4, 8, 0), new TwoLayerFeature(1, 0, 1))).setIgnoreVines().build()));
// MEGA_JUNGLE_TREE = createFeature("mega_jungle_tree", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.JUNGLE_LOG), new SimpleBlockStateProvider(Features.States.JUNGLE_LEAVES), new JungleFoliagePlacer(FeatureSpread.create(2), FeatureSpread.create(0), 2), new MegaJungleTrunkPlacer(10, 2, 19), new TwoLayerFeature(1, 1, 2))).setDecorators(ImmutableList.of(TrunkVineTreeDecorator.field_236879_b_, LeaveVineTreeDecorator.field_236871_b_)).build()));
// MEGA_SPRUCE = createFeature("mega_spruce", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.SPRUCE_LOG), new SimpleBlockStateProvider(Features.States.SPRUCE_LEAVES), new MegaPineFoliagePlacer(FeatureSpread.create(0), FeatureSpread.create(0), FeatureSpread.create(13, 4)), new GiantTrunkPlacer(13, 2, 14), new TwoLayerFeature(1, 1, 2))).setDecorators(ImmutableList.of(new AlterGroundTreeDecorator(new SimpleBlockStateProvider(Features.States.PODZOL)))).build()));
// MEGA_PINE = createFeature("mega_pine", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.SPRUCE_LOG), new SimpleBlockStateProvider(Features.States.SPRUCE_LEAVES), new MegaPineFoliagePlacer(FeatureSpread.create(0), FeatureSpread.create(0), FeatureSpread.create(3, 4)), new GiantTrunkPlacer(13, 2, 14), new TwoLayerFeature(1, 1, 2))).setDecorators(ImmutableList.of(new AlterGroundTreeDecorator(new SimpleBlockStateProvider(Features.States.PODZOL)))).build()));
// SUPER_BIRCH_BEES_0002 = createFeature("super_birch_bees_0002", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.BIRCH_LOG), new SimpleBlockStateProvider(Features.States.BIRCH_LEAVES), new BlobFoliagePlacer(FeatureSpread.create(2), FeatureSpread.create(0), 3), new StraightTrunkPlacer(5, 2, 6), new TwoLayerFeature(1, 0, 1))).setIgnoreVines().setDecorators(ImmutableList.of(Features.Placements.BEES_0002_PLACEMENT)).build()));
// SWAMP_TREE = createFeature("swamp_tree", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.OAK_LOG), new SimpleBlockStateProvider(Features.States.OAK_LEAVES), new BlobFoliagePlacer(FeatureSpread.create(3), FeatureSpread.create(0), 3), new StraightTrunkPlacer(5, 3, 0), new TwoLayerFeature(1, 0, 1))).setMaxWaterDepth(1).setDecorators(ImmutableList.of(LeaveVineTreeDecorator.field_236871_b_)).build()).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(2, 0.1F, 1))));
// JUNGLE_BUSH = createFeature("jungle_bush", Features::TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.JUNGLE_LOG), new SimpleBlockStateProvider(Features.States.OAK_LEAVES), new BushFoliagePlacer(FeatureSpread.create(2), FeatureSpread.create(1), 2), new StraightTrunkPlacer(1, 0, 0), new TwoLayerFeature(0, 0, 0))).func_236702_a_(Heightmap.Type.MOTION_BLOCKING_NO_LEAVES).build()));
// OAK_BEES_0002 = createFeature("oak_bees_0002", Features::TREE.withConfiguration(OAK.getConfig().func_236685_a_(ImmutableList.of(Features.Placements.BEES_0002_PLACEMENT))));
// OAK_BEES_002 = createFeature("oak_bees_002", Features::TREE.withConfiguration(OAK.getConfig().func_236685_a_(ImmutableList.of(Features.Placements.BEES_002_PLACEMENT))));
// OAK_BEES_005 = createFeature("oak_bees_005", Features::TREE.withConfiguration(OAK.getConfig().func_236685_a_(ImmutableList.of(Features.Placements.BEES_005_PLACEMENT))));
// BIRCH_BEES_0002 = createFeature("birch_bees_0002", Features::TREE.withConfiguration(BIRCH.getConfig().func_236685_a_(ImmutableList.of(Features.Placements.BEES_0002_PLACEMENT))));
// BIRCH_BEES_002 = createFeature("birch_bees_002", Features::TREE.withConfiguration(BIRCH.getConfig().func_236685_a_(ImmutableList.of(Features.Placements.BEES_002_PLACEMENT))));
// BIRCH_BEES_005 = createFeature("birch_bees_005", Features::TREE.withConfiguration(BIRCH.getConfig().func_236685_a_(ImmutableList.of(Features.Placements.BEES_005_PLACEMENT))));
// FANCY_OAK_BEES_0002 = createFeature("fancy_oak_bees_0002", Features::TREE.withConfiguration(FANCY_OAK.getConfig().func_236685_a_(ImmutableList.of(Features.Placements.BEES_0002_PLACEMENT))));
// FANCY_OAK_BEES_002 = createFeature("fancy_oak_bees_002", Features::TREE.withConfiguration(FANCY_OAK.getConfig().func_236685_a_(ImmutableList.of(Features.Placements.BEES_002_PLACEMENT))));
// FANCY_OAK_BEES_005 = createFeature("fancy_oak_bees_005", Features::TREE.withConfiguration(FANCY_OAK.getConfig().func_236685_a_(ImmutableList.of(Features.Placements.BEES_005_PLACEMENT))));
// OAK_BADLANDS = createFeature("oak_badlands", OAK.withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(5, 0.1F, 1))));
// SPRUCE_SNOWY = createFeature("spruce_snowy", SPRUCE.withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(0, 0.1F, 1))));
// FLOWER_WARM = createFeature("flower_warm", Features::FLOWER.withConfiguration(Features.Configs.NORMAL_FLOWER_CONFIG).withPlacement(Features.Placements.VEGETATION_PLACEMENT).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withSpreadPlacement(4));
// FLOWER_DEFAULT = createFeature("flower_default", Features::FLOWER.withConfiguration(Features.Configs.NORMAL_FLOWER_CONFIG).withPlacement(Features.Placements.VEGETATION_PLACEMENT).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withSpreadPlacement(2));
// FLOWER_FOREST = createFeature("flower_forest", Features::FLOWER.withConfiguration((new BlockClusterFeatureConfig.Builder(ForestFlowerBlockStateProvider.PROVIDER, SimpleBlockPlacer.PLACER)).tries(64).build()).withPlacement(Features.Placements.VEGETATION_PLACEMENT).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withSpreadPlacement(100));
// FLOWER_SWAMP = createFeature("flower_swamp", Features::FLOWER.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.BLUE_ORCHID), SimpleBlockPlacer.PLACER)).tries(64).build()).withPlacement(Features.Placements.VEGETATION_PLACEMENT).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT));
// FLOWER_PLAIN = createFeature("flower_plain", Features::FLOWER.withConfiguration((new BlockClusterFeatureConfig.Builder(PlainFlowerBlockStateProvider.PROVIDER, SimpleBlockPlacer.PLACER)).tries(64).build()));
// FLOWER_PLAIN_DECORATED = createFeature("flower_plain_decorated", FLOWER_PLAIN.withPlacement(Features.Placements.VEGETATION_PLACEMENT).withPlacement(Features.Placements.FLOWER_TALL_GRASS_PLACEMENT).square().withPlacement(Placement.COUNT_NOISE.configure(new NoiseDependant(-0.8D, 15, 4))));
// private static final ImmutableList<Supplier<ConfiguredFeature<?, ?>>> FOREST_FLOWER_VEGETATION_LIST = ImmutableList.of(() -> {
//     return Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.LILAC), new DoublePlantBlockPlacer())).tries(64).func_227317_b_().build());
// }, () -> {
//     return Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.ROSE_BUSH), new DoublePlantBlockPlacer())).tries(64).func_227317_b_().build());
// }, () -> {
//     return Features::RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.PEONY), new DoublePlantBlockPlacer())).tries(64).func_227317_b_().build());
// }, () -> {
//     return Features::NO_BONEMEAL_FLOWER.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(Features.States.LILY_OF_THE_VALLEY), SimpleBlockPlacer.PLACER)).tries(64).build());
// });
// FOREST_FLOWER_VEGETATION_COMMON = createFeature("forest_flower_vegetation_common", Features::SIMPLE_RANDOM_SELECTOR.withConfiguration(new SingleRandomFeature(FOREST_FLOWER_VEGETATION_LIST)).withSpreadPlacement(FeatureSpread.create(-1, 4)).withPlacement(Features.Placements.VEGETATION_PLACEMENT).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withSpreadPlacement(5));
// FOREST_FLOWER_VEGETATION = createFeature("forest_flower_vegetation", Features::SIMPLE_RANDOM_SELECTOR.withConfiguration(new SingleRandomFeature(FOREST_FLOWER_VEGETATION_LIST)).withSpreadPlacement(FeatureSpread.create(-3, 4)).withPlacement(Features.Placements.VEGETATION_PLACEMENT).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withSpreadPlacement(5));
// DARK_FOREST_VEGETATION_BROWN = createFeature("dark_forest_vegetation_brown", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(HUGE_BROWN_MUSHROOM.withChance(0.025F), HUGE_RED_MUSHROOM.withChance(0.05F), DARK_OAK.withChance(0.6666667F), BIRCH.withChance(0.2F), FANCY_OAK.withChance(0.1F)), OAK)).withPlacement(Placement.DARK_OAK_TREE.configure(IPlacementConfig.NO_PLACEMENT_CONFIG)));
// DARK_FOREST_VEGETATION_RED = createFeature("dark_forest_vegetation_red", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(HUGE_RED_MUSHROOM.withChance(0.025F), HUGE_BROWN_MUSHROOM.withChance(0.05F), DARK_OAK.withChance(0.6666667F), BIRCH.withChance(0.2F), FANCY_OAK.withChance(0.1F)), OAK)).withPlacement(Placement.DARK_OAK_TREE.configure(IPlacementConfig.NO_PLACEMENT_CONFIG)));
// WARM_OCEAN_VEGETATION = createFeature("warm_ocean_vegetation", Features::SIMPLE_RANDOM_SELECTOR.withConfiguration(new SingleRandomFeature(ImmutableList.of(() -> {
//     return Features::CORAL_TREE.withConfiguration(NoFeatureConfig{});
// }, () -> {
//     return Features::CORAL_CLAW.withConfiguration(NoFeatureConfig{});
// }, () -> {
//     return Features::CORAL_MUSHROOM.withConfiguration(NoFeatureConfig{});
// }))).withPlacement(Features.Placements.KELP_PLACEMENT).square().withPlacement(Placement.COUNT_NOISE_BIASED.configure(new TopSolidWithNoiseConfig(20, 400.0D, 0.0D))));
// FOREST_FLOWER_TREES = createFeature("forest_flower_trees", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(BIRCH_BEES_002.withChance(0.2F), FANCY_OAK_BEES_002.withChance(0.1F)), OAK_BEES_002)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(6, 0.1F, 1))));
// TAIGA_VEGETATION = createFeature("taiga_vegetation", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(PINE.withChance(0.33333334F)), SPRUCE)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(10, 0.1F, 1))));
// TREES_SHATTERED_SAVANNA = createFeature("trees_shattered_savanna", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(ACACIA.withChance(0.8F)), OAK)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(2, 0.1F, 1))));
// TREES_SAVANNA = createFeature("trees_savanna", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(ACACIA.withChance(0.8F)), OAK)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(1, 0.1F, 1))));
// BIRCH_TALL = createFeature("birch_tall", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(SUPER_BIRCH_BEES_0002.withChance(0.5F)), BIRCH_BEES_0002)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(10, 0.1F, 1))));
// TREES_BIRCH = createFeature("trees_birch", BIRCH_BEES_0002.withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(10, 0.1F, 1))));
// TREES_MOUNTAIN_EDGE = createFeature("trees_mountain_edge", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(SPRUCE.withChance(0.666F), FANCY_OAK.withChance(0.1F)), OAK)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(3, 0.1F, 1))));
// TREES_MOUNTAIN = createFeature("trees_mountain", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(SPRUCE.withChance(0.666F), FANCY_OAK.withChance(0.1F)), OAK)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(0, 0.1F, 1))));
// TREES_WATER = createFeature("trees_water", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(FANCY_OAK.withChance(0.1F)), OAK)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(0, 0.1F, 1))));
// BIRCH_OTHER = createFeature("birch_other", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(BIRCH_BEES_0002.withChance(0.2F), FANCY_OAK_BEES_0002.withChance(0.1F)), OAK_BEES_0002)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(10, 0.1F, 1))));
// PLAIN_VEGETATION = createFeature("plain_vegetation", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(FANCY_OAK_BEES_005.withChance(0.33333334F)), OAK_BEES_005)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(0, 0.05F, 1))));
// TREES_JUNGLE_EDGE = createFeature("trees_jungle_edge", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(FANCY_OAK.withChance(0.1F), JUNGLE_BUSH.withChance(0.5F)), JUNGLE_TREE)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(2, 0.1F, 1))));
// TREES_GIANT_SPRUCE = createFeature("trees_giant_spruce", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(MEGA_SPRUCE.withChance(0.33333334F), PINE.withChance(0.33333334F)), SPRUCE)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(10, 0.1F, 1))));
// TREES_GIANT = createFeature("trees_giant", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(MEGA_SPRUCE.withChance(0.025641026F), MEGA_PINE.withChance(0.30769232F), PINE.withChance(0.33333334F)), SPRUCE)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(10, 0.1F, 1))));
// TREES_JUNGLE = createFeature("trees_jungle", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(FANCY_OAK.withChance(0.1F), JUNGLE_BUSH.withChance(0.5F), MEGA_JUNGLE_TREE.withChance(0.33333334F)), JUNGLE_TREE)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(50, 0.1F, 1))));
// BAMBOO_VEGETATION = createFeature("bamboo_vegetation", Features::RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(FANCY_OAK.withChance(0.05F), JUNGLE_BUSH.withChance(0.15F), MEGA_JUNGLE_TREE.withChance(0.7F)), Features::RANDOM_PATCH.withConfiguration(Features.Configs.JUNGLE_VEGETATION_CONFIG))).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(30, 0.1F, 1))));
// MUSHROOM_FIELD_VEGETATION = createFeature("mushroom_field_vegetation", Features::RANDOM_BOOLEAN_SELECTOR.withConfiguration(new TwoFeatureChoiceConfig(() -> {
//     return HUGE_RED_MUSHROOM;
// }, () -> {
//     return HUGE_BROWN_MUSHROOM;
// })).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT));
}